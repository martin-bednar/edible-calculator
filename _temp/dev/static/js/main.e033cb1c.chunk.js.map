{"version":3,"sources":["logo.svg","InputSectionTop.js","InputNumber.js","QualityLabel.js","InputSlider.js","Calculator.js","Header.js","Footer.js","InfoPanel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","InputSectionTop","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","number","htmlFor","name","labels","React","Component","InputNumber","_this","handleChange","e","newVal","target","value","correctValueEntered","minVal","maxVal","setState","isIncorrect","onValueChange","validationID","state","precision","step","n","Math","round","roundByStep","toString","substr","parts","top","src_InputSectionTop","inputLabel","numericInput","type","min","max","getNiceValue","onChange","style","width","length","numericInputWithLabel","Inputs","toRender","prepare","QualityLabel","options","minValues","maxValues","typicalValues","buttons","i","Min","Max","Value","Active","console","log","QualityLabel_QualityButton","typical","active","key","QualityButton","children","InputSlider","src_QualityLabel","Calculator","handleValueChange","bind","assertThisInitialized","values","newValues","solveAll","mWeed","potency","mTHCTotal","nPortions","mTHCPortion","result","isFinite","Compute","iDontChange","solveBlank","j","order","src_InputNumber","src_InputSlider","Header","Footer","InfoPanel","id","href","App","src_Header","src_Calculator","src_Footer","src_InfoPanel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e033cb1c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass InputSectionTop extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n        <div className=\"top\">\r\n        <div className=\"number\">\r\n            <div>{this.props.number}</div>\r\n        </div>\r\n        <label htmlFor={this.props.name}>\r\n          <span>\r\n          {this.props.labels[0] || \"\"}\r\n          </span>\r\n        </label>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputSectionTop;","import React, { Component } from 'react';\r\nimport InputSectionTop from './InputSectionTop';\r\n\r\n\r\nclass InputNumber extends React.Component {\r\n  minVal;\r\n  maxVal;\r\n  precision;\r\n  value;\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      isIncorrect: false\r\n    }\r\n    this.minVal = this.props.minVal || 0.1;\r\n    this.maxVal = this.props.maxVal || 1000000;\r\n    this.precision = 1 / this.props.step;\r\n\r\n  }\r\n\r\n  handleChange= (e) => {\r\n    var newVal = e.target.value;\r\n\r\n    var correctValueEntered = (newVal >= this.minVal && newVal <= this.maxVal);\r\n\r\n    this.setState({isIncorrect: !correctValueEntered});\r\n\r\n    this.props.onValueChange(newVal, this.props.validationID, !correctValueEntered);\r\n  }\r\n\r\n  roundByStep(n, step) {\r\n    return (Math.round(n * step) / step);\r\n\r\n  }\r\n  getNiceValue() {\r\n    var newVal = this.roundByStep(this.props.value, this.precision);\r\n    newVal = newVal.toString();\r\n    if(newVal[0]==\"0\"){\r\n      newVal.substr(1);\r\n    }\r\n    return newVal;\r\n  }\r\n  prepare(){\r\n    this.parts = {\r\n      top:\r\n        <InputSectionTop\r\n          number={this.props.validationID + 1}\r\n          name={this.props.name}\r\n          labels={this.props.labels} />,\r\n\r\n      inputLabel:\r\n        <div>\r\n          <span>\r\n            {this.props.labels[1] || \"\"}\r\n          </span>\r\n        </div>,\r\n      \r\n      numericInput:\r\n          <input\r\n          className={this.state.isIncorrect?\"incorrect\":\"\"}\r\n          type=\"number\"\r\n          step={this.props.step}\r\n          min={this.minVal}\r\n          max={this.maxVal}\r\n          name={this.props.name}\r\n          value={this.getNiceValue()}\r\n          onChange={this.handleChange}\r\n          style={{ width: this.getNiceValue().toString().length * 15 + 5 }}\r\n          />,\r\n\r\n      numericInputWithLabel:\r\n          <div></div>\r\n\r\n    };\r\n    //This one must be assigned to only after the previous ones...\r\n    this.parts.numericInputWithLabel = \r\n          <div className=\"input-section-inner\">\r\n\r\n          {this.parts.numericInput}\r\n          {this.parts.inputLabel}\r\n        </div>;\r\n\r\n    this.parts.Inputs = this.parts.numericInputWithLabel;\r\n\r\n    this.parts.toRender =\r\n          <div className=\"input-section\">\r\n          {this.parts.top}\r\n          {this.parts.Inputs}\r\n        </div>;\r\n  }\r\n  render() {\r\n    this.prepare();\r\n    return (\r\n      this.parts.toRender\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputNumber;","import React, { Component } from 'react';\r\nimport { throws } from 'assert';\r\n\r\nclass QualityLabel extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.options = {\r\n            minValues : [0,7,14],\r\n            maxValues : [7,14,50],\r\n            typicalValues : [4,11,21],\r\n            labels : [\"Mild\",\"Medium\",\"Strong\"]\r\n        };\r\n        \r\n        this.buttons = [];\r\n\r\n    }\r\n    prepare(){\r\n\r\n        for(var i=0;i<this.options.labels.length;i++){\r\n            var Min =this.options.minValues[i];\r\n            var Max = this.options.maxValues[i];\r\n            var Value = this.props.value;\r\n            var Active = ((Value>Min)&&(Value<=Max));\r\n            console.log(Value);\r\n            console.log(Active);\r\n            this.buttons[i]=(\r\n                <QualityButton\r\n                min={Min}\r\n                max={Max}\r\n                typical={this.options.typicalValues[i]}\r\n                value={Value}\r\n                active={Active}\r\n                key={i}\r\n                >\r\n                {this.options.labels[i]}</QualityButton>\r\n            );\r\n        }\r\n    }\r\n    render(){\r\n        this.prepare();\r\n        return(\r\n        <div className=\"quality-select-wrapper\">\r\n            {this.buttons} \r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass QualityButton extends React.Component{\r\n    render(){\r\n        return(\r\n        <button type=\"button\" className={this.props.active?\"active\":\"\"}>{this.props.children}</button>\r\n        );\r\n    }\r\n}\r\nexport default QualityLabel;","import React, { Component } from 'react';\r\nimport InputNumber from './InputNumber';\r\nimport QualityLabel from './QualityLabel';\r\n\r\n\r\n\r\nclass InputSlider extends InputNumber {\r\n  handleChange(e) {\r\n    var newVal = e.target.value;\r\n    if (newVal >= this.minVal && newVal <= this.maxVal) {\r\n\r\n      this.props.onValueChange(newVal, this.props.validationID);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.prepare();\r\n\r\n    this.parts.Inputs =\r\n      <div>\r\n        <div>\r\n        {this.parts.numericInputWithLabel}\r\n        </div>\r\n        <div className=\"range-wrapper\">\r\n        <input\r\n          type=\"range\"\r\n          step={this.props.step}\r\n          min={this.minVal}\r\n          max={this.maxVal}\r\n          name={this.props.name + \"Secondary\"}\r\n          value={this.getNiceValue()}\r\n          onChange={this.handleChange}\r\n        />\r\n        </div>\r\n      </div>;\r\n\r\n    this.parts.toRender =\r\n      <div className=\"input-section\">\r\n        {this.parts.top}\r\n        {this.parts.Inputs}\r\n        <QualityLabel value={this.getNiceValue()}></QualityLabel>\r\n      </div>;\r\n\r\n    return (\r\n\r\n      this.parts.toRender\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputSlider;","import React, { Component } from 'react';\r\nimport InputNumber from './InputNumber';\r\nimport InputSlider from './InputSlider';\r\n\r\nclass Calculator extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.handleValueChange = this.handleValueChange.bind(this);\r\n        this.state={\r\n            values:[1,10,60,1,60]\r\n        };\r\n    }\r\n\r\n    handleValueChange(newVal,validationID,isIncorrect){\r\n        var newValues = this.state.values;\r\n        newValues[validationID]=newVal;\r\n\r\n        if(!isIncorrect){\r\n        newValues=this.solveAll(this.state.values,validationID);\r\n        }\r\n        this.setState({values:newValues});\r\n    }\r\n\r\nCompute(i, values) {\r\n        var mWeed, potency, mTHCTotal, nPortions, mTHCPortion;\r\n        mWeed = values[0];\r\n        potency = values[1];\r\n        mTHCTotal = values[2];\r\n        nPortions = values[3];\r\n        mTHCPortion = values[4];\r\n        var result;\r\n        switch (i) {\r\n            case(0): //mWeed\r\n                result= mTHCTotal/(potency*0.006*1000);\r\n                break;  //mWeed = mTHCTotal/(potency*0.006)\r\n    \r\n            case(1): //potency\r\n                result= mTHCTotal/(mWeed*0.006*1000);\r\n                break;  //potency = mTHCTotal/(mWeed*0.006)\r\n    \r\n            case(2): //mTHCTotal\r\n                result = mWeed*(potency/100)*0.6*1000;\r\n                if (!(typeof result=='number'&&isFinite(result))){ //if can't solve this way, try with portions\r\n                    result = mTHCPortion*nPortions;\r\n                }\r\n                break;  //mTHCTotal = mWeed*(potency/100)*0.6*1000 mg\r\n    \r\n            case(3): //nPortions\r\n                result = mTHCTotal/mTHCPortion;\r\n                break;  //nPortions = mTHCTotal/mTHCPortion\r\n    \r\n            case(4): //mTHCPortion\r\n                result = mTHCTotal/nPortions;\r\n                break;  //mTHCPortion = mTHCTotal/nPortions\r\n    \r\n            default:\r\n                result=0;\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    \r\nsolveBlank(values){ //vyplní prázdná pole\r\n    for(var i=0;i<5;i++){\r\n        if(values[i]==\"\"){\r\n            values[i]=this.Compute(i, values);\r\n        }\r\n    }\r\n    return values;\r\n}\r\nsolveAll(values,iDontChange) {\r\n    /*COMPUTE*/\r\n    //Prázdné hodnoty\r\n    values=this.solveBlank(values);\r\n    //Kolize\r\n    /* pořadí\r\n                    1. mTHCTotal\r\n                    2. mTHCPortion\r\n                    3. mWeed\r\n                    4. nPortions\r\n                    5. potency\r\n                    (6. Změněné pole)\r\n            */\r\n    var order=[2,4,0,3,1]; //sestavení pořadí\r\n    var j;\r\n    for(var i=0;i<5;i++){ //Neřeší vše, dočasné...\r\n        j=order[i]; //přiřazení pořadí\r\n        if (j!=iDontChange){\r\n            values[j]=this.Compute(j, values);\r\n        }\r\n\r\n    }\r\n    return values;\r\n} \r\n    render(){\r\n        const values=this.state.values;\r\n        return(\r\n            <form name=\"mainForm\">\r\n        \r\n        <InputNumber \r\n          name=\"mWeed\" \r\n          labels={[<p>What is the <b>weight of the cannabis</b> used?</p>,\"g\"]} \r\n          value={values[0]}\r\n          step={0.1}\r\n          minVal={0.1}\r\n          maxVal={3000}\r\n          validationID={0}\r\n          onValueChange={this.handleValueChange}\r\n          />\r\n\r\n        <InputSlider \r\n          name=\"potency\" \r\n          labels={[<p>What is the <b>percentage of THC</b> in the cannabis?</p>,\"%\"]} \r\n          maxVal={40} \r\n          value={values[1]}\r\n          step={0.01}\r\n          validationID={1}\r\n          onValueChange={this.handleValueChange} />\r\n        <InputNumber \r\n          name=\"mTHCTotal\" \r\n          labels={[<p><b>Total amount of THC extracted:</b></p>,\"miligrams\"]}\r\n          value={values[2]}\r\n          step={1}\r\n          minVal={1}\r\n          maxVal={900000}\r\n          validationID={2}\r\n          \r\n          onValueChange={this.handleValueChange} />\r\n\r\n        <InputNumber\r\n            name=\"nPortions\"\r\n            labels={[\"Number of portions:\",\"portions\"]}\r\n            minVal={1}\r\n            value={values[3]}\r\n            step={0.1}\r\n            validationID={3}\r\n            \r\n          onValueChange={this.handleValueChange}\r\n             />\r\n        <InputNumber\r\n            name=\"mTHCPortion\"\r\n            labels={[\"THC per portion:\",\"mg / portion\"]}\r\n            value={values[4]}\r\n            step={1}\r\n            minVal={1}\r\n            maxVal={900000}\r\n            validationID={4}\r\n            \r\n          onValueChange={this.handleValueChange}\r\n             />\r\n            </form>          \r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\nclass Header extends React.Component{\r\n    render(){\r\n        return(\r\n            <header>\r\n                <h1>Edible Calculator</h1>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nclass Footer extends React.Component{\r\n    render(){\r\n        return(\r\n            <footer>\r\n                <a>{this.props.children}</a>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\n\r\nclass InfoPanel extends Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n<h1 id=\"edibledosagecalculator\">Edible dosage calculator</h1>\r\n\r\n<p>Here you can figure out the amount of THC (potency) of your cannabis edibles or <a href=\"https://www.leafly.com/news/lifestyle/recipe-how-to-make-basic-cannabutter\">cannabutter</a>.</p>\r\n\r\n<p>Alternatively, you can use this calculator to figure out the weight of your cannabis needed to produce certain amount of THC in the finished product.</p>\r\n\r\n<h2 id=\"usageguide\">Usage guide</h2>\r\n\r\n<p>You are free to edit any of the variables of the THC extraction, so that you can either calculate the amount of cannabis needed to produce the desired potency of your edibles, or you can calculate the total amount of THC in your edibles by entering the amount of cannabis you started with.</p>\r\n\r\n<p>This calculator works most precisely for decarboxyled cannabis, so don't forget to <a href=\"https://www.leafly.com/news/cannabis-101/what-is-decarboxylation\">decarboxylate</a> it first!</p>\r\n\r\n<h3>1. Weight of the cannabis used</h3>\r\n\r\n<p>Is the total dry weight of your starting product (cannabis) before the extraction.</p>\r\n\r\n<h3>2. Percentage of THC</h3>\r\n\r\n<p>The typical percentage of THC in your starting product goes usually like this:\r\n    <ul>\r\n    <li> approx. 5% for <strong>uncut</strong> dried plant material. </li>\r\n    <li> 7-14% for <strong>lower quality</strong> dried cannabis buds. </li>\r\n    <li> 15-25% for <strong>higher quality</strong> dried cannabis buds. High quality cannabis usually doesn't contain any seeds or leaves and has been properly dried and cured. </li>\r\n    </ul>\r\n    </p>\r\n<h3>3. Total amount of THC extracted</h3>\r\n\r\n<p>Is the total amount of psychoactive THC <em>(Δ-9-THC)</em> dissolved in your final extraction product.</p>\r\n\r\n<h2 id=\"howdoesitworkcalculationsexplained\">How does it work? Calculations explained</h2>\r\n\r\n<p>This calculator assumes the conversion rate of <strong>60%</strong> (1 gram of 10% THC product transforms into 60 mg Δ-9-THC dissolved in oil).</p>\r\n\r\n<p>Several online tools assume a 100% conversion rate, which is not even theoretically possible! The highest rate possible in laboratory environment is around 87%, but in case of homemade edibles, it's typically even lower because of the limitations of </p>\r\n</div>);\r\n    }\r\n}\r\nexport default InfoPanel;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport InputNumber from './InputNumber';\nimport Calculator from './Calculator';\nimport Header from './Header.js';\nimport Footer from './Footer.js';\nimport InfoPanel from './InfoPanel.js'\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"page-root--wrapper\">\n      <div className=\"page-root\">\n      <div className=\"layout-root\">\n        <Header></Header>\n        <section>\n      <Calculator>\n        </Calculator>\n        </section>\n        <Footer>Help / Info</Footer>\n        </div>\n      <div className=\"info-root\">\n        <InfoPanel />\n      </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}